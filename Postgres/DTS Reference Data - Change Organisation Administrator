/*
	Update Administrator : 	Based on
	SQL Template for Database Data Changes
	Author	: Donna Hull
	Date	: 17/04/2025
	Version	: 0.2
*/


-- Check DB/Server Name
-- IMPORTANT : This section is NOT to be removed. All changes are to include a Server and database check
-- Set the ServerName and DBName variables as appropriate for your change
DO -- Anonymous Block
$ServerCheck$
DECLARE
	correctServer Varchar(100) := 'plum-v14-flexible-sandbox'; --<ServerName>
	correctDBName Varchar(100) := 'rhubarb'; --<DBName>	
	currentServer Varchar(100);
	currentDatabase Varchar(100);
BEGIN
	select REVERSE(REGEXP_REPLACE(REVERSE(setting), '-atad', '',1,1)), current_database() 
	into currentServer,currentDatabase 
	from pg_settings 
	where name='azure.customer_resource_group';
	
    if currentServer <> correctServer THEN
    RAISE EXCEPTION
      USING DETAIL = 'Wrong SERVER! Server [' || currentServer|| '] should be [' || correctServer|| ']';
    END IF;	if currentDatabase <> correctDBName THEN
    RAISE EXCEPTION
      USING DETAIL = 'Wrong DB! DB [' || currentDatabase || '] should be [' || correctDBName|| ']';
    END IF;
	RAISE NOTICE E'CORRECT Server and DB : Server [%], Database [%]\n',currentServer,currentDatabase;
END
$ServerCheck$;




--DTSRD-xxxx
DO
$CR$
DECLARE
  TicketNumber varchar(10) := 'DTSRD-xxxx';
  AffectedRows integer;
  StatusText varchar(20);
  --<include any script variables here>
  EmailNew varchar(200) := '<New email address>';
  EmailOld varchar(200) := '<Old email address>';
  OrdIdentifier varchar(20) := '<OrgIdentifier>';
  UserIdNew uuid;
  UserIdOld uuid;
BEGIN

	StatusText='Select New User Id';
	SELECT 	pu.id
	INTO	UserIdNew
	FROM    dbrefdata.professional_user pu
    WHERE   LOWER(pu.email_address) = LOWER(EmailNew);
	RAISE NOTICE 'NewUserId [%] for Email [%]',UserIdNew,EmailNew;
	
	StatusText='Select Old User Id';
	SELECT 	pu.id
	INTO	UserIdOld
	FROM    dbrefdata.professional_user pu
    WHERE   LOWER(pu.email_address) = LOWER(EmailOld)
	AND 	pu.organisation_id = (SELECT id from dbrefdata.organisation o where o.organisation_identifier = OrdIdentifier);
	RAISE NOTICE 'OldUserId [%] for Email [%]',UserIdOld,EmailOld;

		
	-- Step 1
    StatusText='Step 1';
    UPDATE dbrefdata.user_attribute
	SET professional_user_id = UserIdNew
	WHERE prd_enum_type = 'ADMIN_ROLE'
    AND   professional_user_id = UserIdOld;
    GET DIAGNOSTICS AffectedRows = ROW_COUNT;
    if AffectedRows <> 1 then
       RAISE EXCEPTION '% % : ERROR wrong number of rows altered --> %',TicketNumber,StatusText,AffectedRows;
    end if;
    RAISE NOTICE '% % : Rows UPDATED by query=%', TicketNumber,StatusText, AffectedRows ;

    -- Step 2
    StatusText='Step 2';
	UPDATE dbrefdata.user_account_map
	SET professional_user_id = UserIdNew
	WHERE professional_user_id = UserIdOld;
    GET DIAGNOSTICS AffectedRows = ROW_COUNT;
    if AffectedRows <> 1 then
       RAISE EXCEPTION '% % : ERROR wrong number of rows altered --> %',TicketNumber,StatusText,AffectedRows;
    end if;
    RAISE NOTICE '% % : Rows UPDATED by query=%', TicketNumber,StatusText, AffectedRows ;


	RAISE NOTICE E'% SUCCESSFUL COMPLETION, all changes COMMITTED.\n',TicketNumber;
 
EXCEPTION
    WHEN others THEN
    RAISE NOTICE '% % : ERROR RAISED, all changes ROLLED BACK', TicketNumber,StatusText;
    RAISE EXCEPTION
        USING DETAIL = 'ERROR:Change Failed [' || SQLSTATE|| ']' || SQLERRM;
        --transaction is rolled back;
END 
$CR$;

